// src/components/AuthPage.jsx
// Top-level auth screen with toggle between Login and Register.

import React, { useState } from "react";
import { useAuth } from "../hooks/useAuth";
import { CenterCard } from "./CenterCard";
import { LoginForm } from "./LoginForm";
import { RegisterForm } from "./RegisterForm";

export function AuthPage() {
  const { register, login, error, loading: authLoading, user } = useAuth();
  const [mode, setMode] = useState("login"); // 'login' | 'register'
  const [recentUsername, setRecentUsername] = useState("");

  async function handleRegister(data) {
    const res = await register(data);
    if (res.success) {
      // username was generated by backend; we can show it
      const uname = res.data?.username || "";
      setRecentUsername(uname);
      setMode("login"); // switch to login if autoLogin disabled; else AuthContext already logged in
    }
  }

  async function handleLogin(data) {
    const res = await login(data);
    if (res.success) {
      // logged in; parent App will show protected area
    }
  }

  return (
    <CenterCard>
      <div className="mb-4 flex justify-center space-x-2" role="tablist">
        <button
          type="button"
          role="tab"
          aria-selected={mode === "login"}
          onClick={() => setMode("login")}
          className={`px-3 py-1 rounded ${mode === "login" ? "bg-blue-600 text-white" : "bg-gray-200"}`}
        >
          Login
        </button>
        <button
          type="button"
          role="tab"
          aria-selected={mode === "register"}
          onClick={() => setMode("register")}
          className={`px-3 py-1 rounded ${mode === "register" ? "bg-blue-600 text-white" : "bg-gray-200"}`}
        >
          Register
        </button>
      </div>

      {mode === "login" ? (
        <LoginForm onSubmit={handleLogin} loading={authLoading} error={error} initialUsername={recentUsername} />
      ) : (
        <RegisterForm onSubmit={handleRegister} loading={authLoading} error={error} />
      )}

      {user?.username && (
        <p className="mt-4 text-xs text-center text-gray-500">Current user: {user.username}</p>
      )}
    </CenterCard>
  );
}